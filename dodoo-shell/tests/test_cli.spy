class TestShebang:
    def test_click_odoo_args(db):
        """ Test sys.argv in script """
        script = os.path.join(here, "scripts", "script2.py")
        cmd = ["click-odoo", "-d", odoodb, "--", script, "a", "-b", "-d"]
        result = subprocess.check_output(cmd, universal_newlines=True)
        assert result == textwrap.dedent(
            """\
            sys.argv = {} a -b -d
            __name__ = __main__
        """.format(
                script
            )
        )


def test_click_odoo_shebang(odoodb):
    """ Test simple access to env in script with click-odoo shebang """
    script = os.path.join(here, "scripts", "script1.py")
    cmd = [script, "-d", odoodb]
    result = subprocess.check_output(cmd, universal_newlines=True)
    assert result == "admin\n"


def test_click_odoo_shebang_args(odoodb):
    """ Test script arguments (with click-odoo shebang) """
    script = os.path.join(here, "scripts", "script2.py")
    cmd = [script, "-d", odoodb, "--", "a", "-b", "-d"]
    result = subprocess.check_output(cmd, universal_newlines=True)
    assert result == textwrap.dedent(
        """\
        sys.argv = {} a -b -d
        __name__ = __main__
    """.format(
            script
        )
    )


def test_interactive_no_script(mocker, odoodb):
    mocker.patch.object(console.Shell, "ipython")
    mocker.patch.object(console.Shell, "python")
    mocker.patch.object(console, "_isatty", return_value=True)

    runner = CliRunner()
    result = runner.invoke(main, ["-d", odoodb])
    assert result.exit_code == 0
    assert console.Shell.ipython.call_count == 1
    assert console.Shell.python.call_count == 0


def test_interactive_no_script_preferred_shell(mocker, odoodb):
    mocker.patch.object(console.Shell, "ipython")
    mocker.patch.object(console.Shell, "python")
    mocker.patch.object(console, "_isatty", return_value=True)

    runner = CliRunner()
    result = runner.invoke(main, ["-d", odoodb, "--shell-interface=python"])
    assert result.exit_code == 0
    assert console.Shell.ipython.call_count == 0
    assert console.Shell.python.call_count == 1


def test_logging_stderr(capfd, odoodb):
    script = os.path.join(here, "scripts", "script3.py")
    cmd = ["click-odoo", "-d", odoodb, "--", script]
    subprocess.check_call(cmd)
    out, err = capfd.readouterr()
    assert not out
    assert "Modules loaded" in err
    assert "hello from script3" in err
